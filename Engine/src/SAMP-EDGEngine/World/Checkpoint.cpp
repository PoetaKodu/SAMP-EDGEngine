#include "EnginePCH.hpp"

#include <SAMP-EDGEngine/World/Checkpoint.hpp>

namespace samp_edgengine
{

//////////////////////////////////////////////////////////////////////////////////////////////////////
Checkpoint::Checkpoint()
	:
	m_size{ 3 },
	m_intersectionRadius{ 3 },// a default size is 3m radius
	m_intersectionHeight{ 7 } // a default height is 7m radius
{
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
Checkpoint::Checkpoint(math::Vector3f const& location_, float size_, float intersectionRadius_, float intersectionHeight_)
	:
	m_size{ size_ },
	m_intersectionRadius{ (intersectionRadius_ <= 0 ? m_size : intersectionRadius_) },
	m_intersectionHeight{ (intersectionHeight_ <= 0 ? 7.f : intersectionHeight_) }
{
	// Note: statically resolved virtual method does not matter here.
	this->setLocation(location_);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
void Checkpoint::setPlacementTracker(I3DNodePlacementTracker* tracker_)
{
	m_placementTracker = tracker_;
	this->sendPlacementUpdate();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
I3DNodePlacementTracker* Checkpoint::getPlacementTracker() const
{
	return m_placementTracker;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
void Checkpoint::sendPlacementUpdate()
{
	if (m_placementTracker)
		m_placementTracker->whenPlacementUpdateReceived( this->getPlacement() );
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
ActorPlacement Checkpoint::getPlacement() const
{
	return { this->getLocation(), this->getWorld(), this->getInterior() };
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
void Checkpoint::setSize(float size_)
{
	m_size = size_;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
void Checkpoint::setIntersectionRadius(float intersectionRadius_)
{
	m_intersectionRadius = intersectionRadius_;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
void Checkpoint::setIntersectionHeight(float intersectionHeight_)
{
	m_intersectionHeight = intersectionHeight_;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
float Checkpoint::getSize() const
{
	return m_size;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
float Checkpoint::getIntersectionRadius() const
{
	return m_intersectionRadius;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
float Checkpoint::getIntersectionHeight() const
{
	return m_intersectionHeight;
}

}

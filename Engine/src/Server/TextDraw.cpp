#include SAMPEDGENGINE_PCH

#include <SAMP-EDGEngine/Server/TextDraw.hpp>

#include <SAMP-EDGEngine/Server/Player.hpp>

namespace samp_edgengine
{

////////////////////////////////////////////////////////////////////////////////////
ITextDraw::ITextDraw()
	:
	m_handle{ InvalidHandle },
	m_font{ Font::Clear }, m_textAlign{ TextAlign::Left }, m_outlineSize{ 0 },
	m_shadowSize{ 0 }, m_useBox{ false }, m_proportional{ false }, m_selectable{ false },
	m_layer{ 0 },
	m_previewModelIndex{ -1 }, m_previewZoom{ 1.0f }, m_previewVehicleColors{ -1, -1 }
{
}

////////////////////////////////////////////////////////////////////////////////////
ITextDraw::~ITextDraw()
{
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setText(std::string_view text_, bool update_)
{
	m_text = text_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setFont(Font font_, bool update_)
{
	m_font = font_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setLocation(math::Vector2f const& location_)
{
	m_location = location_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setTextColor(Color const& textColor_, bool update_)
{
	m_textColor = textColor_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setBoxColor(Color const& boxColor_, bool update_)
{
	m_boxColor = boxColor_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setBackgroundColor(Color const& bgColor_, bool update_)
{
	m_bgColor = bgColor_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setTextAlign(TextAlign align_, bool update_)
{
	m_textAlign = align_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setLetterSize(math::Vector2f const& letterSize_, bool update_)
{
	m_letterSize = letterSize_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setTextSize(math::Vector2f const& textSize_, bool update_)
{
	m_textSize = textSize_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setOutlineSize(Int32 outlineSize_, bool update_)
{
	m_outlineSize = outlineSize_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setShadowSize(Int32 shadowSize_, bool update_)
{
	m_shadowSize = shadowSize_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setUseBox(bool useBox_, bool update_)
{
	m_useBox = useBox_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setProportional(bool proportional_, bool update_)
{
	m_proportional = proportional_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setSelectable(bool selectable_, bool update_)
{
	m_selectable = selectable_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setPreview(Int32 modelIndex_, math::Vector3f const &rotation_, float zoom_, std::array<Int32, 2> vehColors_, bool update_)
{
	m_previewModelIndex 	= modelIndex_;
	m_previewRotation 		= rotation_;
	m_previewZoom 			= zoom_;
	m_previewVehicleColors 	= vehColors_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setPreviewModel(Int32 modelIndex_, bool update_)
{
	m_previewModelIndex = modelIndex_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setPreviewRotation(math::Vector3f const& rotation_, bool update_)
{
	m_previewRotation = rotation_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setPreviewZoom(float zoom_, bool update_)
{
	m_previewZoom = zoom_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setPreviewVehicleColors(std::array<Int32, 2> vehColors_, bool update_)
{
	m_previewVehicleColors = vehColors_;
}

////////////////////////////////////////////////////////////////////////////////////
void ITextDraw::setLayer(Int32 layer_)
{
	m_layer = layer_;
}

////////////////////////////////////////////////////////////////////////////////////
Int32 ITextDraw::getHandle() const
{
	return m_handle;
}

////////////////////////////////////////////////////////////////////////////////////
bool ITextDraw::isCreated() const
{
	return m_handle != InvalidHandle;
}

////////////////////////////////////////////////////////////////////////////////////
ITextDraw::Font ITextDraw::getFont() const
{
	return m_font;
}

////////////////////////////////////////////////////////////////////////////////////
math::Vector2f ITextDraw::getLocation() const
{
	return m_location;
}

////////////////////////////////////////////////////////////////////////////////////
Color ITextDraw::getTextColor() const
{
	return m_textColor;
}

////////////////////////////////////////////////////////////////////////////////////
Color ITextDraw::getBoxColor() const
{
	return m_boxColor;
}

////////////////////////////////////////////////////////////////////////////////////
Color ITextDraw::getBackgroundColor() const
{
	return m_bgColor;
}

////////////////////////////////////////////////////////////////////////////////////
ITextDraw::TextAlign ITextDraw::getTextAlign() const
{
	return m_textAlign;
}

////////////////////////////////////////////////////////////////////////////////////
math::Vector2f ITextDraw::getLetterSize() const
{
	return m_letterSize;
}

////////////////////////////////////////////////////////////////////////////////////
math::Vector2f ITextDraw::getTextSize() const
{
	return m_textSize;
}

////////////////////////////////////////////////////////////////////////////////////
Int32 ITextDraw::getOutlineSize() const
{
	return m_outlineSize;
}

////////////////////////////////////////////////////////////////////////////////////
Int32 ITextDraw::getShadowSize() const
{
	return m_shadowSize;
}

////////////////////////////////////////////////////////////////////////////////////
bool ITextDraw::isUsingBox() const
{
	return m_useBox;
}

////////////////////////////////////////////////////////////////////////////////////
bool ITextDraw::isProportional() const
{
	return m_proportional;
}

////////////////////////////////////////////////////////////////////////////////////
bool ITextDraw::isSelectable() const
{
	return m_selectable;
}

////////////////////////////////////////////////////////////////////////////////////
bool ITextDraw::hasPreview() const
{
	return m_previewModelIndex != -1;
}

////////////////////////////////////////////////////////////////////////////////////
Int32 ITextDraw::getPreviewModel() const
{
	return m_previewModelIndex;
}

////////////////////////////////////////////////////////////////////////////////////
math::Vector3f ITextDraw::getPreviewRotation() const
{
	return m_previewRotation;
}

////////////////////////////////////////////////////////////////////////////////////
float ITextDraw::getPreviewZoom() const
{
	return m_previewZoom;
}

////////////////////////////////////////////////////////////////////////////////////
Int32 ITextDraw::getPreviewVehicleColor(bool first_) const
{
	return m_previewVehicleColors[(first_ ? 0 : 1)];
}

////////////////////////////////////////////////////////////////////////////////////
Int32 ITextDraw::getLayer() const
{
	return m_layer;
}

}
